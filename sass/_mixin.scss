
@mixin box-sizing($box-sizing) {
  @include prefixer(box-sizing, $box-sizing, webkit moz ms o spec);
}

@mixin border-radius($border-radius) {
  @include prefixer(border-radius, $border-radius, webkit moz ms o spec);
}

@mixin box-shadow($shadow) {
  @include prefixer(box-shadow, $shadow, webkit moz ms o spec);
}

@mixin transition($transition) {
  @include prefixer(transition, $transition, webkit moz ms o spec);
}

@mixin animation($animation) {
  @include prefixer(animation, $animation, webkit moz ms o spec);
}

@mixin opacity($value){
  $IEValue: $value*100;
  opacity: $value;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity="+$IEValue+")";
  filter: alpha(opacity=$IEValue);
}

@mixin filter-gradient($from-color, $to-color , $vv) {
    // background-color: mix($from-color, $to-color); Fallback
    background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, from($from-color), to($to-color));
    background-image: -webkit-linear-gradient(top, $from-color, $to-color); 
    background-image:    -moz-linear-gradient(top, $from-color, $to-color);
    background-image:     -ms-linear-gradient(top, $from-color, $to-color);
    background-image:      -o-linear-gradient(top, $from-color, $to-color);
    -ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorStr='$from-color', EndColorStr='$to-color')";
}

